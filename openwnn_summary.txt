### OpenWnnソースコード調査 要約

#### **結論から言うと…**
OpenWnnの仕組みは、私たちが考えていたよりもずっと高度で、**辞書はテキストファイルではなく、高速化のためにC/C++言語で書かれた専用プログラム（ライブラリ）の中に固められていた。**
まさに「お金儲けのタネ」の部分は、簡単には見えないように隠されている感じだね。

#### **1. 辞書の形式について**
*   **テキストの辞書はない:** 予想していた`.txt`や`.csv`のような辞書ファイルは、リポジトリの中には見当たらなかった。
*   **JNIで呼び出し:** `OpenWnnDictionaryImplJni.java`というファイルが、そのC/C++製ライブラリ（`libWnnJpnDic.so`）を呼び出す「窓口」の役割をしていた。
*   **命令を送るだけ:** Javaのプログラムは、この窓口を通して「この読みで単語を検索して！」「次の候補をちょうだい！」みたいに命令を送るだけで、実際の辞書検索はC/C++のライブラリが高速に処理する、っていう分業体制になってる。

#### **2. 変換のロジックについて**
*   **司令塔は`OpenWnnEngineJAJP.java`:** このファイルが、かな漢字変換全体の流れを管理している親玉みたいな存在だった。
*   **単純な単語置換じゃない:** 一番すごいのは`OpenWnnClauseConverterJAJP.java`っていうファイル。これは、ただ単語を置き換えるんじゃなくて、「**連続文節変換**」っていう高度なことをやっている。
*   **一番「それっぽい」文章を選ぶ仕組み:**
    1.  「わたしはとうきょうにいく」という入力があったら、まず「わたし」「は」「とうきょう」「に」「いく」みたいに、考えられる全ての文節の区切り方を試す。
    2.  それぞれの単語の品詞（名詞、助詞、動詞など）を見て、「この単語の次にこの単語はつながりやすいか？（接続コスト）」を計算する。
    3.  単語自体の出現しやすさ（頻度）も考慮して、全ての組み合わせの中から、**文章として一番自然なつながり方（＝合計コストが一番低いもの）**を一つだけ選び出す。
    *   （これは、専門的には**Viterbi（ヴィタビ）アルゴリズム**っていう有名な手法に近い考え方だよ）

#### **【結論】私たちの習作へのヒント**
OpenWnnの仕組みをDSで完全に再現するのは、メモリ的にも処理速度的にも、すごく難しい挑戦だね。

でも、**「品詞」**と**「接続コスト」**っていう考え方は、すごく参考にできそう！

私たちの「世界一小さな漢字変換エンジン」を作るなら、
*   **ステップ1:** まずは品詞とかを考えない、単純な「読み」と「漢字」の辞書を作る。
*   **ステップ2:** もし余裕があったら、辞書に「名詞」「動詞」みたいな簡単な品詞情報を持たせて、「名詞の後には助詞が来やすい」みたいな、ごくごく単純な接続ルールを少しだけ実装してみる。

…こんな風に進めていけば、OpenWnnの「考え方」のいいとこ取りができて、すごく面白い習作になるかもしれないね！
